// Создать приложение, в котором пользователь вводит массив из различных слов.
// На выходе приложение должно показать слова сгруппированные по признаку "состоят из одинаковых букв".
// Например, на входе ["eat", "tea", "tan", "ate", "nat", "bat"].
// Получаем группы:
//"ate", "eat", "tea"
//"nat", "tan"
//"bat"


// Основная функция программы
fun main() {
    // Вывод приглашения пользователю ввести слова через запятую
    print("Введите слова через запятую: ")

    // Считывание введенной пользователем строки
    val input = readLine()

    // Проверка, является ли введенная строка null или пустой
    if (input.isNullOrBlank()) {
        // Вывод сообщения о том, что пользователь не ввел слова, и завершение программы
        println("Вы не ввели слова.")
        return
    }

    // разбивает строку input на подстроки, используя запятую в качестве разделителя,
    // и затем убирает пробелы по краям каждой подстроки.
    val words = input.split(",").map { it.trim() }

    // Группировка слов по анаграммам с использованием функции groupWordsByAnagram
    val groupedWords = groupWordsByAnagram(words)

    // Вывод групп анаграмм на экран
    for (group in groupedWords) {
        println(group.joinToString(", "))
    }
}

// Функция для группировки слов по анаграммам
fun groupWordsByAnagram(words: List<String>): List<List<String>> {
    // Инициализация изменяемого словаря для хранения групп слов
    val groupedWords = mutableMapOf<String, MutableList<String>>()

    // Проход по каждому слову в списке
    for (word in words) {
        //Каждое слово разбивается на отдельные символы, эти символы сортируются в порядке возрастания,
        // и потом снова объединяются обратно в строку. "eat" станет "aet"
        val sortedWord = word.toCharArray().sorted().joinToString("")

        // Метод, который проверяет, содержит ли словарь ключ sortedWord.
        // Возвращается true, если ключ присутствует, и false, если ключ(Отсортированное слово) отсутствует
        if (!groupedWords.containsKey(sortedWord)) {
            // Если нет, создание новой записи в словаре с ключом - отсортированным словом
            // и значением - пустым списком
            groupedWords[sortedWord] = mutableListOf()
        }

        // Добавление текущего слова в список слов для данного отсортированного слова
        groupedWords[sortedWord]?.add(word)
    }

    // Возврат списка списков слов, сгруппированных по анаграммам.
    // groupedWords.values: Эта часть получает все значения из словаря
    // groupedWords.В данном случае, это будут списки слов.
    //toList(): Преобразует полученные значения в список.
    return groupedWords.values.toList()
}
